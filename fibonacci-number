The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

APPROACH 1 : Using Recursion + Memoization

int t[31];
  
    int solve(int n) {
        if(n <= 1)
            return n;
        
        if(t[n] != -1)
            return t[n];
        
        return t[n] = fib(n-1) + fib(n-2);
    }
    
    int fib(int n) {
        memset(t, -1, sizeof(t));
      
        return solve(n);
    }

APPROACH 2 : Using Bottom - Up (Tabulation)

int fib(int n) {
        
        if(n <= 1)
            return n;
        
        int t[n+1];
        //State definition
        //t[i] = ith Fibonacci Number
        
        t[0] = 0;
        t[1] = 1;
        
        for(int i = 2; i<=n; i++) {
            t[i] = t[i-1] + t[i-2];
        }
        
        return t[n];
        
    }

APPROACH 3 : Using Constant Space

int fib(int n) {
        if( n<=1)
            return n;
        
        
        int c;
        int a = 0, b = 1;
        
        for(int i = 1; i<n; i++) {
            
            c = a+b;
            
            a = b;
            b = c;
             
        }
        
        
        return c;
  }
